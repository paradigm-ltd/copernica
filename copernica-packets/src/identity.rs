use {
    keynesis::{
        key::{
            ed25519_hd,
            ed25519_extended,
            ed25519,
            ed25519::Signature, SharedSecret
        },
        Seed,
    },
    crate::{ Nonce, bloom_filter_index, BFI},
    anyhow::{Result, anyhow},
    std::{
        convert::{TryFrom, TryInto as _},
        fmt::{self, Display, Formatter},
        str::FromStr,
    },
    thiserror::Error,
};
const SIGNING_PATH_V1: &[u8] = b"/copernica/v1/signing";
const EXCHANGE_PATH_ROOT_V1: &[u8] = b"/copernica/v1/exchange";

/// private identity, to keep close to you, privately and securely
///
/// From this root key multiple key may be generated depending on
/// the needs and protocols.
///
#[derive(Debug, Eq, PartialEq, Hash, Clone)]
struct PrivateIdentity(ed25519_hd::SecretKey);

/// Public identity
///
/// Making this public (include the public key and the chain code)
/// allows for anyone to derive the public key associated to the
/// different schemes (signing or key exchange).
///
/// This key cannot be used for anything else, we restrict its usage
/// to public derivation of different keys
///
#[derive(Debug, Ord, PartialOrd, Eq, PartialEq, Hash, Clone)]
pub struct PublicIdentity(ed25519_hd::PublicKey);

#[derive(Debug, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]
pub enum PublicIdentityInterface {
    Present { public_identity: PublicIdentity },
    Absent,
}
impl PublicIdentityInterface {
    pub fn new(public_identity: PublicIdentity) -> Self {
        Self::Present { public_identity }
    }
    pub fn bloom_filter_index(&self) -> Result<BFI> {
        match self {
            PublicIdentityInterface::Present { public_identity } => Ok(bloom_filter_index(&format!("{}", public_identity))?),
            PublicIdentityInterface::Absent => Ok(BFI::new()),
        }
    }
    pub fn public_identity(&self) -> Result<PublicIdentity> {
        match self {
            PublicIdentityInterface::Present { public_identity } => Ok(public_identity.clone()),
            PublicIdentityInterface::Absent => Err(anyhow!("PublicIdentity is Absent")),
        }
    }
}

impl fmt::Display for PublicIdentityInterface {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        let out = match self {
            PublicIdentityInterface::Present { public_identity } => {
                format!("{}", public_identity)
            }
            PublicIdentityInterface::Absent => {
                format!("Absent_Key")
            }
        };
        write!(f, "{}", out)
    }
}

/// The Signing Key associated to your `PrivateIdentity`.
///
/// This key is derived from the `PrivateIdentity`. Anyone with
/// the `PublicIdentity` key can derivate the associated `PublicVerifyKey`
/// and verify any signature generated with this key.
#[derive(Debug, Eq, PartialEq, Hash, Clone)]
pub struct PrivateSigningKey(ed25519_extended::SecretKey);

/// The Verify Key associated to the `PrivateSigningKey`.
///
/// Any signature generated by the `PrivateSigningKey` can be
/// verified with this key. It is not necessary to share this
/// key as it can be derived from the `PublicIdentity`.
#[derive(Debug, Ord, PartialOrd, Eq, PartialEq, Hash, Clone)]
pub struct PublicVerifyKey(ed25519::PublicKey);

/// Secret key to use for key exchange
///
/// This key is derived from the `PrivateIdentity` and are used
/// to established a key exchange (Diffie-Hellman) with a `PublicKey`.
#[derive(Debug, Eq, PartialEq, Hash, Clone)]
struct SecretKey(ed25519_extended::SecretKey);

/// Public key to use for key exchange
///
/// This key is derived from the `PublicIdentity` and is meant for
/// establishing a key exchange (Diffie-Hellman). It is not
/// necessary to share this key as it can be derived from the
/// `PublicIdentity` (assuming the derivation path is known by both
/// party).
#[derive(Debug, Ord, PartialOrd, Eq, PartialEq, Hash, Clone)]
pub struct PublicKey(ed25519::PublicKey);

impl PrivateIdentity {
    /// build a private identity from the given `Seed`
    ///
    pub fn from_seed(seed: Seed) -> Self {
        let mut rng = seed.into_rand_chacha();
        Self(ed25519_hd::SecretKey::new(&mut rng))
    }
    pub fn public_id(&self) -> PublicIdentity {
        PublicIdentity(self.0.public_key())
    }

    pub fn signing_key(&self) -> PrivateSigningKey {
        PrivateSigningKey(self.0.derive(SIGNING_PATH_V1).into_key())
    }

    pub fn derive<P>(&self, purpose: P) -> SecretKey
    where
        P: AsRef<[u8]>,
    {
        let mut path = EXCHANGE_PATH_ROOT_V1.to_vec();
        path.extend_from_slice(purpose.as_ref());
        SecretKey(self.0.derive(path).into_key())
    }
}

impl PublicIdentity {
    pub const SIZE: usize = ed25519_hd::PublicKey::SIZE;

    pub fn verify_key(&self) -> anyhow::Result<PublicVerifyKey> {
        //PublicVerifyKey(self.0.derive(SIGNING_PATH_V1).unwrap().into_key())
        if let Some(derived) = self.0.derive(SIGNING_PATH_V1) {
            return Ok(PublicVerifyKey(derived.into_key()))
        } else {
            return Err(anyhow!("PublicKey Derive returned None"))
        }
    }

    pub fn derive<P>(&self, purpose: P) -> PublicKey
    where
        P: AsRef<[u8]>,
    {
        let mut path = EXCHANGE_PATH_ROOT_V1.to_vec();
        path.extend_from_slice(purpose.as_ref());
        PublicKey(self.0.derive(path).unwrap().into_key())
    }

    pub fn key(&self) -> &ed25519_extended::PublicKey {
        self.0.key()
    }

    pub fn chain_code(&self) -> &ed25519_hd::ChainCode {
        self.0.chain_code()
    }
}

impl PrivateSigningKey {
    pub fn public(&self) -> PublicVerifyKey {
        PublicVerifyKey(self.0.public_key())
    }

    pub fn sign<M>(&self, message: M) -> Signature
    where
        M: AsRef<[u8]>,
    {
        self.0.sign(message)
    }
}

impl PublicVerifyKey {
    pub const SIZE: usize = ed25519::PublicKey::SIZE;

    pub fn verify<M>(&self, signature: &Signature, message: M) -> bool
    where
        M: AsRef<[u8]>,
    {
        self.0.verify(message, signature)
    }
}

impl SecretKey {
/*
    pub fn public(&self) -> PublicKey {
        PublicKey(self.0.public_key())
    }
*/
    pub fn exchange(&self, key: &PublicKey) -> SharedSecret {
        self.0.exchange(&key.0)
    }
}

impl PublicKey {
    pub const SIZE: usize = ed25519::PublicKey::SIZE;
}

/* Formatter *************************************************************** */

impl Display for PublicIdentity {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        use bech32::ToBase32 as _;
        let mut writer = bech32::Bech32Writer::new("id", f)?;

        let mut bytes = self.0.key().as_ref().to_vec();
        bytes.extend_from_slice(self.0.chain_code().as_ref());

        // self.0.key().write_base32(&mut writer)?;
        // self.0.chain_code().write_base32(&mut writer)?;
        bytes.write_base32(&mut writer)?;

        writer.finalize()
    }
}

impl Display for PublicKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        self.0.fmt(f)
    }
}

impl Display for PublicVerifyKey {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        self.0.fmt(f)
    }
}

#[derive(Debug, Error)]
pub enum PublicIdentityError {
    #[error("Not a valid bech32 encoded PublicIdentity")]
    InvalidBech32(
        #[source]
        #[from]
        bech32::Error,
    ),

    #[error("Invalid key type prefix, expected 'id' but received {hrp}")]
    InvalidHRP { hrp: String },

    #[error("Invalid public key")]
    InvalidKey(
        #[source]
        #[from]
        ed25519_hd::PublicKeyError,
    ),
}

impl FromStr for PublicIdentity {
    type Err = PublicIdentityError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        use bech32::FromBase32 as _;

        let (hrp, data) = bech32::decode(s)?;
        if hrp != "id" {
            return Err(Self::Err::InvalidHRP { hrp });
        }
        let data = Vec::<u8>::from_base32(&data)?;
        let pid = ed25519_hd::PublicKey::try_from(data.as_slice()).map(Self)?;
        Ok(pid)
    }
}

impl FromStr for PublicVerifyKey {
    type Err = hex::FromHexError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        s.parse().map(Self)
    }
}

impl FromStr for PublicKey {
    type Err = hex::FromHexError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        s.parse().map(Self)
    }
}

/* Conversion ************************************************************** */

impl From<PublicIdentity> for String {
    fn from(pid: PublicIdentity) -> Self {
        pid.to_string()
    }
}

impl From<[u8; Self::SIZE]> for PublicIdentity {
    fn from(bytes: [u8; Self::SIZE]) -> Self {
        Self(bytes.into())
    }
}

impl From<[u8; Self::SIZE]> for PublicVerifyKey {
    fn from(bytes: [u8; Self::SIZE]) -> Self {
        Self(bytes.into())
    }
}

impl From<[u8; Self::SIZE]> for PublicKey {
    fn from(bytes: [u8; Self::SIZE]) -> Self {
        Self(bytes.into())
    }
}

impl TryFrom<String> for PublicIdentity {
    type Error = <Self as FromStr>::Err;

    fn try_from(value: String) -> Result<Self, Self::Error> {
        value.parse()
    }
}
impl<'a> TryFrom<&'a str> for PublicIdentity {
    type Error = <Self as FromStr>::Err;

    fn try_from(value: &'a str) -> Result<Self, Self::Error> {
        value.parse()
    }
}

impl<'a> TryFrom<&'a [u8]> for PublicIdentity {
    type Error = ed25519_hd::PublicKeyError;

    fn try_from(value: &'a [u8]) -> Result<Self, Self::Error> {
        value.try_into().map(Self)
    }
}

impl<'a> TryFrom<&'a [u8]> for PublicVerifyKey {
    type Error = ed25519::PublicKeyError;

    fn try_from(value: &'a [u8]) -> Result<Self, Self::Error> {
        value.try_into().map(Self)
    }
}

impl<'a> TryFrom<&'a [u8]> for PublicKey {
    type Error = ed25519::PublicKeyError;

    fn try_from(value: &'a [u8]) -> Result<Self, Self::Error> {
        value.try_into().map(Self)
    }
}

#[derive(Clone, Eq, PartialEq, Hash, Debug)]
enum PrivateIdentityState {
    SentinelOne { key: PrivateIdentity },
    FileSystem  { key: PrivateIdentity },
    Key         { key: PrivateIdentity },
}
#[derive(Clone, Eq, PartialEq, Hash, Debug)]
pub struct PrivateIdentityInterface {
    inner: PrivateIdentityState,
}
impl PrivateIdentityInterface {
    pub fn new_key() -> Self {
        let mut rng = rand::thread_rng();
        let key = PrivateIdentity::from_seed(Seed::generate(&mut rng));
        Self { inner: PrivateIdentityState::Key { key } }
    }
    pub fn new_fs() -> Self {
        let mut rng = rand::thread_rng();
        let key = PrivateIdentity::from_seed(Seed::generate(&mut rng));
        Self { inner: PrivateIdentityState::FileSystem { key } }
    }
    pub fn new_sentinel() -> Self  {
        let mut rng = rand::thread_rng();
        let key = PrivateIdentity::from_seed(Seed::generate(&mut rng));
        Self { inner: PrivateIdentityState::SentinelOne { key } }
    }
    pub fn public_id(&self) -> PublicIdentity {
        match &self.inner {
            PrivateIdentityState::Key { key } => {
                key.public_id()
            },
            PrivateIdentityState::FileSystem { key } => {
                key.public_id()
            },
            PrivateIdentityState::SentinelOne { key } => {
                key.public_id()
            },
        }
    }
    pub fn shared_secret(&self, nonce: Nonce, rx_pid: PublicIdentity) -> SharedSecret {
        let rx_pk = rx_pid.derive(&nonce.0);
        match &self.inner {
            PrivateIdentityState::Key { key } => {
                let tx_sk = key.derive(&nonce.0);
                let shared_secret = tx_sk.exchange(&rx_pk);
                shared_secret
            },
            PrivateIdentityState::FileSystem { key } => {
                let tx_sk = key.derive(&nonce.0);
                let shared_secret = tx_sk.exchange(&rx_pk);
                shared_secret
            },
            PrivateIdentityState::SentinelOne { key } => {
                let tx_sk = key.derive(&nonce.0);
                let shared_secret = tx_sk.exchange(&rx_pk);
                shared_secret
            },
        }
    }
    pub fn signing_key(&self) -> PrivateSigningKey {
        match &self.inner {
            PrivateIdentityState::Key { key } => {
                key.signing_key()
            },
            PrivateIdentityState::FileSystem { key } => {
                key.signing_key()
            },
            PrivateIdentityState::SentinelOne { key } => {
                key.signing_key()
            },
        }
    }
}



