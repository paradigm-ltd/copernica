// terminology
// sid == secret identity; pid == public identity
// c = consumer, r == router, p == producer
// c2r = a consumer to router link
// v = which side of the link the data is. e.g.: cv2r = the data is on the consumer side of the c2r link
//     this convention is purely to allow for unique names, as verifpal won't compile if, for example,
//     "data" is instantiated twice.

// run this code by installing verifpal then
// $ verifpal verify verifpal.vp
// read the verifpal manual here: https://verifpal.com/res/pdf/manual.pdf

attacker[active]
principal DataProducer [
    knows private
        producer_protocol_sid,
        producer_link_sid,
        data
    producer_link_pid = G^producer_link_sid
]
principal Router [
    knows private router_link_sid
    router_link_pid = G^router_link_sid
]
principal DataConsumer [
    knows private consumer_link_sid, consumer_protocol_sid
    consumer_link_pid = G^consumer_link_sid
]
// communicated likely during a connection contract
Router -> DataProducer: [router_link_pid]
DataProducer -> Router: [producer_link_pid]
// communicated likely during a connection contract
Router -> DataConsumer: [router_link_pid]
DataConsumer -> Router: [consumer_link_pid]

phase[1]
principal DataProducer [
    producer_protocol_pid = G^producer_protocol_sid
]
// communicated likely on a business card
DataProducer -> DataConsumer: [producer_protocol_pid]
phase[2]
principal DataConsumer [
    consumer_protocol_pid = G^consumer_protocol_sid
    generates data_nonce_cv2r, link_nonce_cv2r
    request_cv2r = CONCAT(
        producer_protocol_pid,
        consumer_protocol_pid,
        data_nonce_cv2r
    ) // data name should be in here, including it is superfluous
    request_cyphertext_cv2r = AEAD_ENC(
        router_link_pid^consumer_link_sid,
        request_cv2r,
        link_nonce_cv2r
    )
]
DataConsumer -> Router: request_cyphertext_cv2r, link_nonce_cv2r
principal Router [
    request_c2vr = AEAD_DEC(
        consumer_link_pid^router_link_sid,
        request_cyphertext_cv2r,
        link_nonce_cv2r
    )?
    generates link_nonce_rv2p
    request_cyphertext_rv2p = AEAD_ENC(
        producer_link_pid^router_link_sid,
        request_c2vr,
        link_nonce_rv2p
    )
]
Router -> DataProducer: request_cyphertext_rv2p, link_nonce_rv2p
principal DataProducer [
    request_r2vp = AEAD_DEC(
        router_link_pid^producer_link_sid,
        request_cyphertext_rv2p,
        link_nonce_rv2p
    )?
    producer_protocol_pid_pv2r,
    consumer_protocol_pid_pv2r,
    response_nonce_pv2r = SPLIT(request_r2vp)
    generates link_nonce_pv2r
    data_cyphertext_pv2r = AEAD_ENC(
        consumer_protocol_pid_pv2r^producer_protocol_sid,
        data,
        response_nonce_pv2r
    )
    signature_pv2r = SIGN(producer_protocol_sid, data)
    response_concat_pv2r = CONCAT(
        data_cyphertext_pv2r,
        signature_pv2r,
        response_nonce_pv2r
    )
    response_cyphertext_pv2r = AEAD_ENC(
        router_link_pid^producer_link_sid,
        response_concat_pv2r,
        link_nonce_pv2r
    )
]
DataProducer -> Router: response_cyphertext_pv2r, link_nonce_pv2r
principal Router [
    response_concat_p2vr = AEAD_DEC(
        producer_link_pid^router_link_sid,
        response_cyphertext_pv2r,
        link_nonce_pv2r
    )?
    generates link_nonce_rv2c
    response_cyphertext_rv2c = AEAD_ENC(
        consumer_link_pid^router_link_sid,
        response_concat_p2vr,
        link_nonce_rv2c
    )
]
Router -> DataConsumer: response_cyphertext_rv2c, link_nonce_rv2c
principal DataConsumer [
    response_concat_p2vc = AEAD_DEC(
        router_link_pid^consumer_link_sid,
        response_cyphertext_rv2c,
        link_nonce_rv2c
    )?
    data_cyphertext_p2vc,
    signature_p2vc,
    response_nonce_p2vc = SPLIT(response_concat_p2vc)?
    cleartext_data = AEAD_DEC(
        producer_protocol_pid^consumer_protocol_sid,
        data_cyphertext_p2vc,
        response_nonce_p2vc
    )?
    verified_data = SIGNVERIF(producer_protocol_pid, cleartext_data, signature_p2vc)?
]
queries[
    confidentiality? producer_protocol_sid
    confidentiality? consumer_protocol_sid
    confidentiality? producer_link_sid
    confidentiality? router_link_sid
    confidentiality? consumer_link_sid
    confidentiality? data
]
